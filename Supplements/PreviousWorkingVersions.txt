

return_t __stdcall CalculateDisparitySinglePoint(LPVOID lp) {
	CalculateDisparityControl* ctl = (CalculateDisparityControl*)lp;

	Mat aux = ctl->aux;
	Mat aux2 = ctl->aux2;

	const Point pt = ctl->pt;

	const int strip2searchWidth = ctl->strip2searchWidth; 
	const int strip2searchHalfWidth = strip2searchWidth >> 1;
	const int halfWidth = ctl->patternHalfWidth;
	const int blurHeight = ctl->blurHeight;

	auto& best_it = ctl->best_it;


	int64_t start_time = GetDayTimeInMilliseconds();


	auto checkPoint = [&aux, halfWidth](cv::Point& pt, int& ancorOffset) {
		if (pt.x < 0) {
			ancorOffset += pt.x;
			pt.x = 0;
		}
		if (pt.y < 0) {
			pt.y = 0;
		}
		const int xmax = aux.cols - (halfWidth << 1);
		if (pt.x > xmax) {
			ancorOffset += pt.x - xmax;
			pt.x = xmax;
		}
		if (pt.y > aux.rows) {
			pt.y = aux.rows;
		}
	};
	auto checkRectangle = [&checkPoint](cv::Rect& rect, int& ancorOffset) {
		cv::Point pt1(rect.x, rect.y);
		cv::Point pt2(rect.x + rect.width, rect.y + rect.height);
		checkPoint(pt1, ancorOffset);
		checkPoint(pt2, ancorOffset);

		rect = cv::Rect(pt1, pt2);
	};


	cv::Scalar cropMean = cv::mean(aux);
	cv::Scalar strip2searchMean = cv::mean(aux2);

	double cropIntensity = (cropMean(0) * 0.114 + cropMean(1) * 0.587 + cropMean(2) * 0.299);
	double strip2searchIntensity = (strip2searchMean(0) * 0.114 + strip2searchMean(1) * 0.587 + strip2searchMean(2) * 0.299);

	cv::Point originalPoint = pt;


	const size_t number_of_passes = 5;
	const size_t number_of_iterations = 5;


	DisparityAlgorithmControl iter_ctl[number_of_passes];
	CalculateDisparityControl::iteration_result iter_rs[number_of_passes];
	int iter = 0;


	int pos = 0;
	int good_count = 0;
	int iterAncorOffset = 0;

	int patternHalfWidth = halfWidth;

	do {
		int64_t iteration_start_time = GetDayTimeInMilliseconds();

		iterAncorOffset = 3 * strip2searchHalfWidth / 2 + iter * 3 * strip2searchHalfWidth / 2;

		std::cout << std::endl << "running Disparity iteration " << iter << "; patternHalfWidth: " << patternHalfWidth << "; strip2searchWidth: " << strip2searchWidth << "; iterAncorOffset: " << iterAncorOffset << std::endl;


		auto disparityAlgorithm = [&](DisparityAlgorithmControl& ctl) {
			const int pass = ctl._pass;

			int64_t iteration_pass_start_time = GetDayTimeInMilliseconds();

			int ancorOffset = pass * ctl._halfWidth / 2; // each pass generates different ancorOffset
			int stripAncorOffset = ctl._stripAncorOffset;
			int stripWidth = strip2searchWidth;

			std::vector<double> disps;
			std::vector<int64_t> costs;

			auto disparityAlgorithm_internal =
				[&](const cv::Point& pt0, const Mat& left, const Mat& right, Mat& crop, Mat& strip2search, int64_t& resultCost, double leftIntensity, double rightIntensity) -> cv::Point {

				//cv::Rect -> x≤pt.x<x+width, y≤pt.y<y+height

				cv::Rect cropRect(pt0.x - ancorOffset, pt0.y - blurHeight / 2, 2 * ctl._halfWidth + 1, blurHeight);
				cv::Rect strip2searchRect(pt0.x - stripAncorOffset, pt0.y - blurHeight / 2, stripWidth, blurHeight);

				checkRectangle(cropRect, ancorOffset);
				checkRectangle(strip2searchRect, stripAncorOffset);


				crop = Mat(left, cropRect);
				strip2search = Mat(right, strip2searchRect);

				if (crop.dims == 0 || crop.rows == 0) {
					return cv::Point(-1, -1);
				}
				if (strip2search.dims == 0 || strip2search.rows == 0) {
					return cv::Point(-1, -1);
				}


				cv::Scalar cropMean = cv::mean(crop);
				cv::Scalar strip2searchMean = cv::mean(strip2search);
				double seedReference[3];
				BuildIdealChannels_Likeness(crop, cv::Point(ctl._halfWidth, blurHeight / 2), seedReference, blurHeight / 2);
				double cropFactor[3];
				double strip2searchFactor[3];
				for (int j = 0; j < 3; ++j) {
					cropFactor[j] = cropMean(j) / std::max(seedReference[j], 1.0);
					strip2searchFactor[j] = strip2searchMean(j) / std::max(seedReference[j], 1.0);
				}


				WhiteBalance<uchar>(crop, cropFactor);
				WhiteBalance<uchar>(strip2search, strip2searchFactor);

				int pos = FindBestAlignment(crop, strip2search, ancorOffset, resultCost, disps, costs) + 0.45;

				cv::Point resPoint;
				resPoint.x = strip2searchRect.x + pos;
				resPoint.y = pt0.y;

				return resPoint;
			};

			auto& it = *ctl._iter_rs;

			it.resPoint = disparityAlgorithm_internal(pt, aux, aux2, it.crop_buffer[0], it.strip2search_buffer[0], it.resultCost, cropIntensity, strip2searchIntensity);

			it.ancorOffset = ancorOffset;
			it.stripAncorOffset = stripAncorOffset;
			it.halfWidth = ctl._halfWidth;
			it.pos = it.resPoint.x - (pt.x - stripAncorOffset);
			it.disps = disps;
			it.costs = costs;

			stripAncorOffset = it.resPoint.x - (pt.x - ancorOffset) + ctl._halfWidth / 4;
			stripWidth = ctl._halfWidth * 3;

			//stripAncorOffset = stripWidth - stripAncorOffset;
			//ancorOffset = ctl._halfWidth * 2 - ancorOffset;
			it.mapPoint = disparityAlgorithm_internal(it.resPoint, aux2, aux, it.crop_buffer[1], it.strip2search_buffer[1], it.mapResultCost, strip2searchIntensity, cropIntensity);
			if (it.mapPoint == cv::Point(-1, -1)) {
				it.disparityError[1] = std::numeric_limits<int>::max();
				it.disparityError[2] = std::numeric_limits<int>::max();
			}
			else {
				it.disparityError[1] = std::abs(pt.x - it.mapPoint.x);
				it.disparityError[2] = std::abs(originalPoint.x - it.mapPoint.x);
			}

			int64_t iteration_pass_end_time = GetDayTimeInMilliseconds();

			std::ostringstream ostr;
			ostr << "iteration pass " << pass << "; time: " << (iteration_pass_end_time - iteration_pass_start_time) << "ms; errors: " << it.disparityError[1] << "; resultCost: " << it.resultCost << "; pos: " << it.pos << std::endl;
			std::cout << ostr.str();
		};




		int min_error = std::numeric_limits<int>::max();

		for (int pass = 0; pass < number_of_passes; ++pass) {
			iter_ctl[pass]._pass = pass;
			iter_ctl[pass]._stripAncorOffset = iterAncorOffset;
			iter_ctl[pass]._halfWidth = patternHalfWidth;
			iter_ctl[pass]._calc_ctl = ctl;
			iter_ctl[pass]._iter_rs = &iter_rs[pass];
			iter_ctl[pass]._status = 0;
			//iter_ctl[pass]._disparityAlgorithm = disparityAlgorithm;
			iter_ctl[pass]._disparityAlgorithm = DisparityAlgorithm;

			QueueWorkItem(ExecuteDisparityAlgorithm, &iter_ctl[pass]);
		}

		int done_count = 0;
		while (done_count < number_of_passes) {
			ProcessWinMessages(10);

			done_count = 0;
			for (int pass = 0; pass < number_of_passes; ++pass) {
				if (iter_ctl[pass]._status == 2) {
					++done_count;
				}
			}
		}


		for (int pass = 0; pass < number_of_passes; ++pass) {
			const auto& it = iter_rs[pass];
			if (it.disparityError[1] < min_error) {
				min_error = it.disparityError[1];
			}
		}


		good_count = 0;

		int avg_count = 0;
		double avg_pos = 0;

		for (int pass = 0; pass < number_of_passes; ++pass) {
			const auto& it = iter_rs[pass];
			if (it.disparityError[1] <= 2) {
				if (it.pos > 0) {
					++avg_count;
					avg_pos += it.pos;
					++good_count;
				}
			}
		}

		if (avg_count > 0) {
			avg_pos /= avg_count;
		}

		for (int pass = 0; pass < number_of_passes; ++pass) {
			auto& it = iter_rs[pass];
			if (it.disparityError[1] == min_error) {
				if (std::abs(avg_pos - it.pos) > 2) {
					good_count = 0;
				}
			}
		}

		if (good_count > 1) {
			for (int pass = 0; pass < number_of_passes; ++pass) {
				auto& it = iter_rs[pass];
				if (it.disparityError[1] == min_error) {
					it.pos = std::floor(avg_pos + 0.5);

					if (best_it.disparityError[1] >= it.disparityError[1]) {
						if (best_it.disparityError[1] == it.disparityError[1]) {
							best_it.pos = floor((best_it.pos + it.pos) / 2.0 + 0.5);
						}
						else {
							best_it = it;
						}
					}
				}
			}
		}

		int64_t iteration_end_time = GetDayTimeInMilliseconds();

		std::ostringstream ostr;
		ostr << "Disparity iteration " << iter << "; time " << (iteration_end_time - iteration_start_time) << "ms" << std::endl;
		std::cout << ostr.str();

		// patternHalfWidth gets increased with each iteration

		patternHalfWidth += halfWidth / 6;

	} while (++iter < number_of_iterations && good_count < 2);

	int64_t end_time = GetDayTimeInMilliseconds();

	std::ostringstream ostr;
	ostr << "Time spent " << (end_time - start_time) << "ms; Used " << iter << " iterations; pos: " << best_it.pos << "; errors: " << best_it.disparityError[1] << ' ' << best_it.disparityError[2] << std::endl;
	std::cout  << ostr.str();
	return 0;
}

