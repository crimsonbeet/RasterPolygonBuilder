double FindBestAlignment(const std::vector<int>& pattern, const std::vector<int>& strip2searchForPattern) { // returns center point of alignment
	const int gapCost = 1;

	const size_t M = pattern.size() + 1;
	const size_t N = strip2searchForPattern.size() + 1;

	const size_t X = M / 2;

	std::vector<std::vector<int>> A(M);
	for (auto& v : A) {
		v.resize(N);
	}

	std::vector<std::vector<int>> T(M);
	for (auto& t : T) {
		t.resize(N);
	}

	for (size_t i = 0; i < M; ++i) {
		A[i][0] = 1; 
	}

	for (size_t j = 0; j < N; ++j) {
		A[0][j] = 1;
	}

	for (size_t i = 1; i < M; ++i) {
		for (size_t j = 1; j < N; ++j) {
			const size_t i_1 = i - 1;
			const size_t j_1 = j - 1;
			//int case1Cost = A[i_1][j_1] + 5 * std::abs(pattern[i_1] - strip2searchForPattern[j_1]);
			int case1Cost = A[i_1][j_1] + (5 * approx_log2(1 + std::abs(pattern[i_1] - strip2searchForPattern[j_1])) + 0.5);
			int case2Cost = A[i_1][j] + 20 * gapCost;
			int case3Cost = A[i][j_1] + 5 * gapCost;
			if (case1Cost < case2Cost && case1Cost < case3Cost) {
				T[i][j] = 1;
				A[i][j] = case1Cost;
			}
			else 
			if (case2Cost < case3Cost) {
				T[i][j] = 2;
				A[i][j] = case2Cost;
			}
			else {
				T[i][j] = 3;
				A[i][j] = case3Cost;
			}
		}
	}

	size_t m = M - 1;
	size_t n = N - 1;

	int caseCost = A[m][n];
	int caseCostMin = caseCost;

	std::stack<size_t> q;
	q.push(n);

	for (size_t j = n; j > M; --j) {
		if (T[m][j] != 3) {
			if (A[m][j] <= caseCost) {
				n = j;
				q.push(n);
				caseCost = A[m][j];
			}
		}
	}

	double pos = 0;

	while (!q.empty()) {
		m = M - 1;
		n = q.top();
		q.pop();

		//if (n != (N - 1)) {
		//	std::cout << "Changed starting case number to " << n << std::endl;
		//}

		int caseType = T[m][n];
		caseCost = std::numeric_limits<int>::max();

		double Y = 0; // yet unknown
		size_t w = 0;

		while (caseType != 0) {
			switch (caseType) {
			case 1:
				--m;
				--n;
				break;
			case 2:
				--m; // case of allignment matches entry from pattern and gap from strip2search
				break;
			case 3:
				--n;
				break;
			}

			if (m == X) {
				caseCost = A[m][n];
				Y += n - 1;
				++w;
				break;
			}

			caseType = T[m][n];
		}

		if (w > 1) {
			Y /= w;
		}

		if (caseCost < caseCostMin) {
			pos = Y;
			caseCostMin = caseCost;
			std::cout << "Changed position to " << pos << std::endl;
		}
	}


	return pos;
}








				Mat mean;
				Mat invCovar;
				Mat_<double> invCholesky(3, 3);
				Mat stdDev;
				Mat factorLoadings;

				double hsvIdeal[3];

				double rgbIdeal[3];
				double* mean_data = nullptr;
				double likeness = 0;

				cv::Point patternCenter(patternHalfWidth, blurHeight / 2);

				std::function<int(cv::Mat&, cv::Point&)> likenessScore; // returns a value discretized from 0 to 10 to represent likeness scrore.

				if (BuildIdealChannels_Distribution(crop, patternCenter, mean, stdDev, factorLoadings, invCovar, invCholesky, blurHeight / 2)) {
					mean_data = (double*)mean.data;
					for (size_t c = 0; c < ARRAY_NUM_ELEMENTS(rgbIdeal); ++c) {
						rgbIdeal[c] = mean_data[c];
					}
				}
				else {
					std::cout << "Using HSV transform" << std::endl;

					BuildIdealChannels_Likeness(crop, patternCenter, rgbIdeal, blurHeight / 2);

					const double y_componentIdeal = rgbIdeal[0] * 0.299 + rgbIdeal[1] * 0.587 + rgbIdeal[2] * 0.114;
					if (y_componentIdeal < 40) {
						default_cv_points();
						continue;
					}

					cv::Vec<uchar, 3> pixIdeal;
					pixIdeal[0] = (uchar)(rgbIdeal[0] + 0.5);
					pixIdeal[1] = (uchar)(rgbIdeal[1] + 0.5);
					pixIdeal[2] = (uchar)(rgbIdeal[2] + 0.5);

					RGB_TO_HSV(pixIdeal, hsvIdeal);
				}

				double invCholesky_data[3][3] = {
					{ invCholesky.at<double>(0, 0), invCholesky.at<double>(0, 1), invCholesky.at<double>(0, 2) },
					{ invCholesky.at<double>(1, 0), invCholesky.at<double>(1, 1), invCholesky.at<double>(1, 2) },
					{ invCholesky.at<double>(2, 0), invCholesky.at<double>(2, 1), invCholesky.at<double>(2, 2) }
				};

				if (mean_data == nullptr) {
					likenessScore = [&hsvIdeal](cv::Mat& aux, cv::Point& pt) -> int {
						double likeness = hsvLikenessScore(aux.at<cv::Vec<uchar, 3>>(pt.y, pt.x), hsvIdeal);
						return 2 * likeness / 25.6 + 0.45;
					};
				}
				else {
					likenessScore = [&mean_data, &invCholesky_data](cv::Mat& aux, cv::Point& pt) -> int {
						double zScore = Get_Squared_Z_Score(aux.at<cv::Vec<uchar, 3>>(pt.y, pt.x), mean_data, invCholesky_data);
						if (zScore < 10) {
							return 2 * (10 - zScore) + 0.45;
						}

						return 0;
					};
				}




2/15/2023 switched to pixel to pixelf fscore

leftovers

double FindBestAlignment(const std::vector<int>& pattern, const std::vector<int>& strip2searchForPattern) { // returns center point of alignment
	const int gapCost = 1;

	const size_t M = pattern.size() + 1;
	const size_t N = strip2searchForPattern.size() + 1;

	const size_t X = M / 2;

	std::vector<std::vector<int>> A(M);
	for (auto& v : A) {
		v.resize(N);
	}

	std::vector<std::vector<int>> T(M);
	for (auto& t : T) {
		t.resize(N);
	}

	for (size_t i = 0; i < M; ++i) {
		A[i][0] = 1; 
	}

	for (size_t j = 0; j < N; ++j) {
		A[0][j] = 1; 
	}

	for (size_t i = 1; i < M; ++i) {
		for (size_t j = 1; j < N; ++j) {
			const size_t i_1 = i - 1;
			const size_t j_1 = j - 1;
			int case1Cost = A[i_1][j_1] + (1 * std::abs(pattern[i_1] - strip2searchForPattern[j_1]));
			//int case1Cost = A[i_1][j_1] + (10 * approx_log2(1 + std::abs(pattern[i_1] - strip2searchForPattern[j_1])) + 0.5);
			int case2Cost = A[i_1][j] + 20 * gapCost;
			int case3Cost = A[i][j_1] + 10 * gapCost;
			if (case1Cost < case2Cost && case1Cost < case3Cost) {
				T[i][j] = 1;
				A[i][j] = case1Cost;
			}
			else 
			if (case2Cost < case3Cost) {
				T[i][j] = 2;
				A[i][j] = case2Cost;
			}
			else {
				T[i][j] = 3;
				A[i][j] = case3Cost;
			}
		}
	}

	size_t m = M - 1;
	size_t n = N - 1;

	int caseCost = A[m][n];
	int caseCostMin = caseCost;

	std::stack<size_t> q;
	q.push(n);

	for (size_t j = n; j > (M + (M>>1)); --j) {
		if (T[m][j] != 3) {
			if (A[m][j] <= caseCost) {
				n = j;
				q.push(n);
				caseCost = A[m][j];
			}
		}
	}

	double pos = 0;

	while (!q.empty()) {
		m = M - 1;
		n = q.top();
		q.pop();

		size_t nStart = n;

		int caseType = T[m][n];
		caseCost = std::numeric_limits<int>::max();

		double Y = 0; // yet unknown

		while (caseType != 0) {
			switch (caseType) {
			case 1:
				--m;
				--n;
				break;
			case 2:
				--m; // case of allignment matches entry from pattern and gap from strip2search
				break;
			case 3:
				--n;
				break;
			}

			if (m == X) {
				caseCost = A[m][n];
				Y = n;
				break;
			}

			caseType = T[m][n];
		}

		if (caseCost < caseCostMin) {
			pos = Y;
			caseCostMin = caseCost;
			std::cout << "Changed position to " << pos << "; starting case number " << nStart << std::endl;
			//break;
		}
	}


	return pos;
}






	//double scaleFactors[3];

	//std::vector<std::vector<uchar>> minMax;
	//mat_minMax(crop, minMax);
	//
	//for (size_t j = 0; j < 3; ++j) {
	//	double range = minMax[j][1] - minMax[j][0];
	//	if (range > 1) {
	//		scaleFactors[j] = 1 + approx_log2(256.0 / range);
	//	}
	//	else {
	//		scaleFactors[j] = 1;
	//	}
	//}



			//double fscore = GetFScore(crop.at<cv::Vec<uchar, 3>>(r, i_1), strip2search.at<cv::Vec<uchar, 3>>(r, j_1), scaleFactors);
			//int64_t case1Cost = A[i_1][j_1] + approx_log2(1 + (256 * (1 - fscore))) + 0.45;

double GetFScore(const cv::Vec<uchar, 3>& ch1, const cv::Vec<uchar, 3>& ch2, double scaleFactors[3]) {
	double fscore = 1;
	for (int j = 0; j < 3; ++j) {
		if (ch1[j] > 0 && ch2[j] > 0) {
			double px[2] = { ch1[j], ch2[j] };
			fscore *= (2.0 * px[0] * px[1]) / (pow(px[0], 2) + pow(px[1], 2));
			fscore /= scaleFactors[j];
		}
	}
	return fscore;
}

//double GetFScore(cv::Vec<uchar, 3> ch1, cv::Vec<uchar, 3> ch2) {
//	double dotProd = 0;
//	double normSqrt = 0;
//	for (int j = 0; j < 3; ++j) {
//		dotProd += (double)ch1[j] * (double)ch2[j];
//
//		normSqrt += (double)ch1[j] * (double)ch1[j];
//		normSqrt += (double)ch2[j] * (double)ch2[j];
//	}
//	double fscoreNorm = 2 * dotProd / normSqrt;
//	return fscoreNorm;
//}










double GetFScore(const cv::Vec<uchar, 3>& ch1, const cv::Vec<uchar, 3>& ch2, double scaleFactors[3], double means[3]) {
	double fscore = 1;
	for (int j = 0; j < 3; ++j) {
		double px[2] = { (ch1[j] - means[j] + 256) * scaleFactors[j], (ch2[j] - means[j] + 256) * scaleFactors[j] };
		if (ch1[j] > 0 && ch2[j] > 0) {
			fscore *= (2.0 * px[0] * px[1]) / (pow(px[0], 2) + pow(px[1], 2));
		}
	}
	return fscore;
}

			double fscore = GetFScore(crop.at<cv::Vec<uchar, 3>>(r, i_1), strip2search.at<cv::Vec<uchar, 3>>(r, j_1), scaleFactors, means);



				std::vector<std::vector<uchar>> minMax;
				mat_minMax(crop, minMax);

				cv::Scalar cvMeans = cv::mean(crop);

				double scaleFactors[3];
				double means[3];

				for (size_t j = 0; j < 3; ++j) {
					double range = minMax[j][1] - minMax[j][0];
					if (range > 1) {
						//scaleFactors[j] = 1 + approx_log2(256.0 / range);
						scaleFactors[j] = 256.0 / range;
					}
					else {
						scaleFactors[j] = 1;
					}
					means[j] = cvMeans.val[j];
				}




