>,solve(e0$cov)

0.009066458,-0.002604613,-0.007678366,-0.002604613,0.020680217,-0.014549229,-0.007678366,-0.014549229,0.023863367
>,e0$loc
116.83199,110.26242,86.00596



solve(t(chol(e0$cov)))

0.01882458,3.006981e-18,0.00000000,-0.07067083,6.300465e-02,0.00000000,0.01382395,-8.628926e-02,0.05968406
>,solve(e0$cov)

0.0055398332,-0.005645450,0.0008250693,-0.0056454496,0.011415424,-0.0051500940,0.0008250693,-0.005150094,0.0035621875
>,e0$loc
174.1293,155.1146,119.2915


{ 0.0055398332, -0.005645450, 0.0008250693, -0.0056454496, 0.011415424, -0.0051500940, 0.0008250693, -0.005150094, 0.0035621875 };// 
{ 174.1293, 155.1146, 119.2915 };// 
{ 0.01882458, 0.0, 0.0, -0.07067083, 6.300465e-02, 0.0, 0.01382395, -8.628926e-02, 0.05968406 };// 





solve(t(chol(e0$cov)))

0.052374674,0.0000000,0.0000000,-0.091283503,0.1223964,0.0000000,-0.008225428,-0.1161083,0.1086425

0.0111434420,-0.01021773,-0.0008936313,-0.0102177345,0.02846203,-0.0126143043,-0.0008936313,-0.01261430,0.0118032002

142.88684,118.87482,66.52122



solve(t(chol(e0$cov)))

0.050860724,0.0000000,0.0000000,-0.087463346,0.1118958,0.0000000,0.004160667,-0.1395670,0.1071472

0.0102539613,-0.01036747,0.0004458039,-0.0103674702,0.03199960,-0.0149542107,0.0004458039,-0.01495421,0.0114805264

143.05750,119.46569,68.23818



solve(t(chol(e0$cov)))
0.061335769,0.0000000,0.0000000,0.007146916,0.1040693,0.0000000,-0.007626832,-0.1603734,0.1888423

>,solve(e0$cov)
0.003871324,0.001966916,-0.001440268,0.001966916,0.036550065,-0.030285284,-0.001440268,-0.030285284,0.035661410

>,e0$loc
117.41603,108.29612,89.85426




			double mean_data[3] = { 117.41603, 108.29612, 89.85426 };// { 116.83199, 110.26242, 86.00596 };// { 143.05750, 119.46569, 68.23818 };// { 158.8078, 147.9445, 125.1749 };
			double invCovar_data[9] = { 0.003871324, 0.001966916, -0.001440268, 0.001966916, 0.036550065, -0.030285284, -0.001440268, -0.030285284, 0.035661410 };// { 0.009066458, -0.002604613, -0.007678366, -0.002604613, 0.020680217, -0.014549229, -0.007678366, -0.014549229, 0.023863367 };// { 0.0102539613, -0.01036747, 0.0004458039, -0.0103674702, 0.03199960, -0.0149542107, 0.0004458039, -0.01495421, 0.0114805264 };// { 0.006623272, -0.005202919, -0.001526119, -0.005202919, 0.009449343, -0.003572090, -0.001526119, -0.003572090, 0.005443892 };
			double invCholesky_data[9] = { 0.061335769, 0.0000000, 0.0000000, 0.007146916, 0.1040693, 0.0000000, -0.007626832, -0.1603734, 0.1888423 };// { 0.04583349, 0.00000000, 0.0000000, -0.06704573, 0.10867251, 0.0000000, -0.04970533, -0.09418335, 0.1544777 };// { 0.050860724, 0.0000000, 0.0000000, -0.087463346, 0.1118958, 0.0000000, 0.004160667, -0.1395670, 0.1071472 };// { 0.02789284, 0.00000000, 0.00000000, -0.07360323, 0.08429391, 0.00000000, -0.02068396, -0.04841362, 0.07378274 };

	//Ptr<FeatureDetector> blobDetector = ClassBlobDetector::create(ClassBlobDetector(min_confidence, min_repeatability, 120, ctl._pattern_is_whiteOnBlack, ctl._pattern_is_chessBoard).params);

const Ptr<FeatureDetector> &blobDetector
	ctl._detector = ClassBlobDetector::create(blobDetector.params);


	double fy = 1.0; 

	//if(image.rows > 1600) {
	//	double fy = 1600.0 / image.rows; 
	//	cv::resize(image, image, cv::Size(0, 0), fy, fy, INTER_AREA);
	//}

	auto image_type = image.type();

	if (image_type == CV_8UC3) {
		//double black_color[3] = { 117, 110, 86 };// { 109, 110, 87 };
		//StandardizeImage_HSV_Likeness(image, black_color);

		double mean_data[3] = { 117.41603, 108.29612, 89.85426 };// { 116.83199, 110.26242, 86.00596 };// { 143.05750, 119.46569, 68.23818 };// { 158.8078, 147.9445, 125.1749 };
		double invCovar_data[9] = { 0.003871324, 0.001966916, -0.001440268, 0.001966916, 0.036550065, -0.030285284, -0.001440268, -0.030285284, 0.035661410 };// { 0.009066458, -0.002604613, -0.007678366, -0.002604613, 0.020680217, -0.014549229, -0.007678366, -0.014549229, 0.023863367 };// { 0.0102539613, -0.01036747, 0.0004458039, -0.0103674702, 0.03199960, -0.0149542107, 0.0004458039, -0.01495421, 0.0114805264 };// { 0.006623272, -0.005202919, -0.001526119, -0.005202919, 0.009449343, -0.003572090, -0.001526119, -0.003572090, 0.005443892 };
		double invCholesky_data[9] = { 0.061335769, 0.0000000, 0.0000000, 0.007146916, 0.1040693, 0.0000000, -0.007626832, -0.1603734, 0.1888423 };// { 0.04583349, 0.00000000, 0.0000000, -0.06704573, 0.10867251, 0.0000000, -0.04970533, -0.09418335, 0.1544777 };// { 0.050860724, 0.0000000, 0.0000000, -0.087463346, 0.1118958, 0.0000000, 0.004160667, -0.1395670, 0.1071472 };// { 0.02789284, 0.00000000, 0.00000000, -0.07360323, 0.08429391, 0.00000000, -0.02068396, -0.04841362, 0.07378274 };

		cv:Mat mean = cv::Mat(1, 3, CV_64F, mean_data);
		cv::Mat invCovar = cv::Mat(3, 3, CV_64F, invCovar_data);
		cv::Mat invCholesky = cv::Mat(3, 3, CV_64F, invCholesky_data);

		cv::Mat stdDev;
		cv::Mat factorLoadings;

		StandardizeImage_Likeness(image, mean, stdDev, factorLoadings, invCovar, invCholesky);

		image = mat_loginvert2word(image);
		image = mat_invert2word(image);
		cv::normalize(image.clone(), image, 0, (size_t)256 * g_bytedepth_scalefactor, NORM_MINMAX, CV_16UC1, Mat());
		image_type = image.type();
	}

	//bool found = findCirclesGrid(image, g_boardChessSize, pointBuf, CALIB_CB_ASYMMETRIC_GRID/* | CALIB_CB_CLUSTERING*/, detector);

	blobDetector.detect(image, keyPoints);





